define fexpr [ bind-native 'fexpr' ];

# define fexpr [ vau (args, body) scope [
#   repr-make-cons 'Fexpr' args [ repr-make-cons 'Inscope' scope body ]
# ] ]

define eval-inscope [ bind-native 'eval-inscope' ];

define repr-make-cons [ bind-native 'repr-make-cons' ];
define repr-value [ bind-native 'repr-value' ];

define native [ fexpr (name) [
  eval-inscope scope [
    repr-make-cons 'Call'
      define (name, [ bind-native [ repr-value name ] ])
  ]
] ];

native repr-make-nil; # (type)

native repr-make; # (type, value)
native repr-value?;
#native repr-value;

#native repr-make-cons; # (type, car, cdr?)
native repr-cons?;
native repr-car;
native repr-cdr?;
native repr-cdr;

native repr-make-var;
native repr-get-var;
native repr-set-var;

native result-get;
native result-of;

native type-of;

native eq;

native +;
native -;
native *;
native /;

native wutcol;

native abort;

native metadata-of;

native with-metadata;

define wrap-operative [ fexpr (opv) [
  fexpr argsp [
    eval-inscope scope [ repr-make-cons 'Call' opv args ]
  ]
] ];

define lambda [ fexpr (args, body) [
  wrap-operative [
    repr-make-cons 'Call'
      fexpr args body
  ]
] ];

define quote [ fexpr (thing) thing ];

define list [ lambda args args ];

# later this should get adjusted to use variable error catching

define assert [ fexpr (expr, errp) [
  wutcol [ eval-inscope scope expr ]
    true
    [ abort [ eval-inscope scope errp ] ]
]

define WRONG_TYPE [ lambda (v, t, tt) ('WRONG_TYPE', v, t, tt) ];

# this sucks but I'm not sure what args I want to give it yet

define NO_SUCH_VALUE [ lambda args [ ('NO_SUCH_VALUE') ] ];
define CANT_BOOL [ lambda args [ ('CANT_BOOL') ] ];

define assert-is-type [ lambda (v, t) [
  assert [ eq [ type-of v ] t ] [ WRONG_TYPE v t [ type-of v ] ]
] ];

define string-of-name [ lambda (v) [
  assert-is-type v 'Name';
  repr-value v
];

define name-of-string [ lambda (v) [
  assert-is-type v 'String';
  repr-make 'Name' v
];

define true [ repr-make 'Bool' 1 ];
define false [ repr-make 'Bool' 0 ];

define bool-of-number [ lambda (v) [
  wutcol [ eq v 0 ] false true
] ];

define bool-of-string [ lambda (v) [
  wutcol [ eq v '' ] false true
] ];

define bool-of-iterable [ lambda (v) [ repr-cons? v ] ];

define bool-of-list bool-of-iterable;

define bool-of-dict bool-of-iterable;

define bool-of [ lambda (v) [
  define vtype [ type-of v ];
  wutcol [ eq vtype 'Bool' ]
    v
    [ wutcol
      [ wutcol [ eq vtype 'Int' ] true [ eq vtype 'Rat' ] ]
      [ bool-of-number v ]
      [ wutcol [ eq vtype 'String' ] [ bool-of-string v ]
        [ wutcol [ wutcol [ eq vtype 'List' ] true [ eq vtype 'Dict' ] ]
          [ bool-of-iterable v ]
          [ error [ CANT_BOOL v vtype ] ] ] ] ];
] ];

define make-nil-result [ lambda () [
  repr-make-cons 'Result' true
] ];

define make-value-result [ lambda (v) [
  repr-make-cons 'Result' true v
] ];

define make-error-result [ lambda (e) [
  repr-make-cons 'Result' false e
] ];

define error [ lambda (e) [
  result-get [ make-error-result e ]
] ];

define assert-is-iterable [ lambda (v) [
  define vtype [ type-of v ];
  assert
    [ wutcol [ eq vtype 'List' ] true [ eq vtype 'Dict' ] ]
    [ WRONG_TYPE v ('List', 'Dict') vtype ]
] ];

define empty? [ lambda (v) [
  assert-is-iterable v;
  wutcol [ repr-cons? v ] false true;
] ];

define first [ lambda (v) [
  assert-is-iterable v;
  wutcol [ repr-cons? v ] true [ error [ NO_SUCH_VALUE ] ];
  repr-car v
] ];

define rest [ lambda (v) [
  assert-is-iterable v;
  wutcol [ repr-cons? v ] true [ error [ NO_SUCH_VALUE ] ];
  wutcol [ repr-cdr? v ] true [ error [ NO_SUCH_VALUE ] ];
  repr-cdr v
] ];

define _dictify [ lambda (me, v) [
  assert-is-type v 'List';
  wutcol [ empty? v ]
    [ repr-make-nil 'Dict' ]
    [ repr-make-cons 'Dict' [ first v ] [ me [ rest v ] ] ];
] ];

define dict-of-list [ lambda (v) [
  _dictify _dictify v
] ];

define dict [ lambda v [ dict-of-list v ] ];

define ?: [ fexpr (expr, iftrue, iffalse) [
  wutcol
    [ bool-of [ eval-inscope scope expr ] ]
    [ eval-inscope scope iftrue ]
    [ eval-inscope scope iffalse ]
] ];

define and [ fexpr (l, r) [
  define lres [ eval-inscope scope l ];
  ?: lres lres [ eval-inscope scope r ];
] ];

define or [ fexpr (l, r) [
  define lres [ eval-inscope scope l ];
  ?: lres [ eval-inscope scope r ] lres;
] ];

define result-is-ok [ lambda (r) [
  assert-is-type r 'Result';
  repr-car r
] ];

define result-has-value [ lambda (r) [
  assert-is-type r 'Result';
  and [ repr-car r ] [ repr-cdr? r ]
] ];

define result-has-error [ lambda (r) [
  assert-is-type r 'Result';
  wutcol [ repr-car r ] false true
] ];

define value-of-result [ lambda (r) [
  assert-is-type r 'Result';
  wutcol [ repr-car r ]
    repr-cdr r
    [ error [ NO_SUCH_VALUE ] ]
] ];

define error-of-result [ lambda (r) [
  assert-is-type r 'Result';
  wutcol [ repr-car r ]
    [ error [ NO_SUCH_VALUE ] ]
    repr-cdr r
] ];

define cons-list [ lambda (v, l) [
  assert-is-type l 'List';
  repr-make-cons 'List' v l
] ];

define concat-list [ lambda (l1, l2) [
  assert-is-type l1 'List';
  assert-is-type l2 'List';
  wutcol
    [ empty? l1 ]
    l2
    [ cons-list [ first l1 ] [ concat-list [ rest l1 ] l2 ]
] ];

define flatconcat-list [ lambda (thing, lst) [
  assert-is-type lst 'List';
  [ wutcol [ eq [ type-of thing ] 'List' ] concat-list cons-list ]
    thing lst
] ];

define _reduce_one [ lambda (me, func, accum, it) [
  wutcol
    [ empty? it ]
    accum
    [ me me func [ func [ first it ] accum ] [ rest it ] ]
] ];

define reduce-list [ lambda (func, it) [
  assert-is-list it;
  _reduce_one _reduce_one func () it
] ];

define make-list-mapper [ lambda (concat-func) [
  lambda (f, lst) [
    define func [ lambda (v, a) [ concat-func a [ f v ] ] ];
    reduce-list func lst
  ]
] ];

define map-list [ make-list-mapper cons-list ];
define listmap-list [ make-list-mapper concat-list ];
define flatmap-list [ make-list-mapper flatconcat-list ];
