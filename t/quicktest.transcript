$ 1 + 2
= 3
$ 1 + 2; 3 + 4
= 7
$ 1 - 3
= -2
$ 1.minus 3
= -2
$ 1.eq 3
= false
$ 1.eq 1
= true
$ 1 == 1
= true
$ 1 == 3
= false
$ 1.eq(1)
= true
$ 1.plus(2, 3)
= 6
$ 1.plus 2 3
= 6
$ 'foo' ++ 'bar'
= 'foobar'
$ (3, 2, 1)(1)
= 2
$ .plus() 1 2 3
= 6
$ .plus(1) 2 3
= 6
$ (1, 2, 3).map .plus(1)
= (2, 3, 4)
$ + 1 2 3
= 6
$ (1, 2, 3) ++ (4, 5)
= (1, 2, 3, 4, 5)
$ ( (1), (2), (3) ).map .concat(('x'))
= (('x', 1), ('x', 2), ('x', 3))
$ [ 1 == 1 ].ifelse 3 4
= 3
$ [ 1 == 0 ].ifelse 3 [3+4]
= 7
$ 3 + 2 * 4
= 11
$ let x = 3; x + 2
= 5
$ let x = [ let y = 3 ] + 4;
= 7
$ let (x, y) = (1, 2); y + 3;
= 5
$ var x = 3;
  do { let y = 4; x = x + y }
  x
= 7
$ let f = fun (x) { x + 1 }; f 3
= 4
$ let f = do { let x = 3; fun (y) { x + y } }; f 7
= 10
$ let f = fun (x) { x.ifelse do{ return 1 } 2; 3 }; f false
= 3
$ let f = fun (x) { x.ifelse do{ return 1 } 2; 3 }; f true
= 1
$ var x = 1;
  let inc = fun () { x = x + 1 }
  inc();
  inc();
  x
= 3
$ var x = 1;
  let inc = fun () { x = x + 1 } # increment
  inc();
  inc();
  x
= 3
$ let nf = fexpr (cx, name) { name }
  nf foo
= foo
$ var x = 1;
  let run-twice = fexpr (cx, expr) {
    cx.eval expr;
    cx.eval expr;
  }
  run-twice [ x = x + 1 ];
  x
= 3
